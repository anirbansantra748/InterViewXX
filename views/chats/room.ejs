<style>
  body {
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #1a1a2e, #161623);
    margin: 0;
    padding: 0;
    color: #f5f5f5;
    overflow: hidden;
  }

  /* üß∞ TOOLBAR */
  header#navbar {
    position: fixed;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 98%;
    z-index: 100;
    padding: 0.8rem 1.2rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.6rem;
    background: rgba(20, 20, 30, 0.8);
    backdrop-filter: blur(8px);
    border: 1px solid rgba(100, 100, 150, 0.2);
    border-radius: 1rem;
    margin: 0.5rem auto;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
  }

  .tool-btn {
    padding: 0.45rem 0.9rem;
    background: #232335;
    border: 1px solid #3a3a50;
    border-radius: 0.5rem;
    color: #e0e0f0;
    font-size: 0.85rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.25s ease;
  }

  .tool-btn:hover {
    background: #373760;
    color: #ffffff;
  }

  .tool-btn.active {
    background: linear-gradient(135deg, #a855f7, #6366f1);
    color: #fff;
    font-weight: 600;
  }

  select,
  input[type="color"],
  input[type="range"] {
    background: #1e1e2e;
    color: white;
    border: 1px solid #444;
    padding: 0.3rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.8rem;
  }

  input[type="range"] {
    accent-color: #6366f1;
  }

  input[type="color"] {
    padding: 0;
    width: 2rem;
    height: 2rem;
    border-radius: 0.375rem;
    cursor: pointer;
  }

  /* üé® CANVAS AREA */
  #canvas-container {
    position: absolute;
    top: 4.8rem;
    bottom: 0;
    left: 0;
    right: 0;
    background: #0e0e0e;
    overflow: hidden;
  }

  #drawing-canvas {
    width: 100%;
    height: 100%;
    position: absolute;
  }

  #text-box-container {
    pointer-events: none;
  }

  /* üé• VIDEO PANEL */
  #video-section {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    z-index: 100;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    background: rgba(25, 25, 40, 0.75);
    backdrop-filter: blur(6px);
    padding: 1rem;
    border-radius: 1rem;
    border: 1px solid rgba(90, 90, 160, 0.2);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  #video-section video {
    border-radius: 0.75rem;
    border: 2px solid #6366f1;
    width: 180px;
    height: 120px;
    object-fit: cover;
    background: #000;
  }

  #video-section p {
    font-size: 0.7rem;
    color: #aaa;
    text-align: center;
    margin: 0;
  }

  #video-section strong {
    color: #fff;
  }

  /* üì± Mobile Adjustments */
  @media (max-width: 768px) {
    #video-section {
      right: 0.5rem;
      bottom: 0.5rem;
      padding: 0.5rem;
    }

    #video-section video {
      width: 140px;
      height: 100px;
    }

    header#navbar {
      flex-direction: column;
      gap: 0.4rem;
    }

    .tool-btn {
      font-size: 0.75rem;
      padding: 0.3rem 0.6rem;
    }
  }
</style>


<!-- üîß TOOLBAR -->
<header id="navbar">
  <div class="flex flex-wrap gap-2 items-center justify-center">
    <button id="pen-tool" class="tool-btn active">Pen üñãÔ∏è</button>
    <button id="marker-tool" class="tool-btn">Marker ‚úèÔ∏è</button>
    <button id="text-tool" class="tool-btn">Text üÖ∞Ô∏è</button>
    <button id="eraser-tool" class="tool-btn">Eraser üßΩ</button>
    <button id="shape-tool" class="tool-btn">Shape  üî∑</button>
    <select id="shape-type">
      <option value="rectangle">Rectangle ‚óªÔ∏è</option>
      <option value="circle">Circle ‚ö™</option>
      <option value="arrow">Arrow ‚û°Ô∏è</option>
    </select>
    <button id="select-tool" class="tool-btn">Select üñ±Ô∏è</button>

    <!-- <input type="range" id="stroke-width" min="1" max="50" value="5" />
    <span id="stroke-width-value">5</span> -->

    <button id="undo-btn" class="tool-btn">‚óÄÔ∏è Undo</button>
    <button id="redo-btn" class="tool-btn">Redo ‚ñ∂Ô∏è</button>
    <button id="clear-btn" class="tool-btn bg-red-600 text-white hover:bg-red-700">Clear üóëÔ∏è</button>

        <input type="color" id="color-picker" value="#ffffff" />
  </div>
</header>

<!-- üé® CANVAS -->
<section id="canvas-container">
  <canvas id="drawing-canvas"></canvas>
  <div id="text-box-container"></div>
</section>

<!-- üìπ VIDEO -->
<section id="video-section">
  <video id="localVideo" autoplay muted playsinline></video>
  <video id="remoteVideo" autoplay playsinline></video>
  <p>Room ID: <strong><%= roomId %></strong></p>
  <p>User: <strong><%= currentUser.username %></strong></p>
</section>

<!-- üîå Scripts -->
<script src="/socket.io/socket.io.js"></script>
<script src="/js/script.js" defer></script>

<script>
  const socket = io();
  const roomId = "<%= roomId %>";
  const isInitiator = "<%= isInitiator %>";
  let localStream, peerConnection;

  socket.emit('join-room', roomId);

  async function startMedia() {
    try {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      document.getElementById('localVideo').srcObject = localStream;

      peerConnection = new RTCPeerConnection();
      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

      peerConnection.ontrack = event => {
        document.getElementById('remoteVideo').srcObject = event.streams[0];
      };

      peerConnection.onicecandidate = event => {
        if (event.candidate) {
          socket.emit('ice-candidate', { roomId, candidate: event.candidate });
        }
      };

      if (isInitiator === "true") {
        console.log("üé¨ Waiting for peer...");
      }
    } catch (err) {
      alert("‚ùå Cannot access camera/mic");
      console.error(err);
    }
  }

  startMedia();

  socket.on('user-connected', async () => {
    console.log("üîó Peer connected");
    if (isInitiator && peerConnection) {
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit('offer', { roomId, offer });
    }
  });

  socket.on('offer', async ({ offer }) => {
    if (!peerConnection) await startMedia();
    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    socket.emit('answer', { roomId, answer });
  });

  socket.on('answer', async ({ answer }) => {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
  });

  socket.on('ice-candidate', async ({ candidate }) => {
    if (candidate && peerConnection) {
      await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    }
  });

  // Sync slider value
  const strokeSlider = document.getElementById("stroke-width");
  const strokeValue = document.getElementById("stroke-width-value");
  strokeSlider.addEventListener("input", () => {
    strokeValue.textContent = strokeSlider.value;
  });
</script>
